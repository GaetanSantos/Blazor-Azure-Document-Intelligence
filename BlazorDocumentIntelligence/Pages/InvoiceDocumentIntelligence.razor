@page "/document-intelligence-invoice"
@using BlazorDocumentIntelligence.Services
@using BlazorDocumentIntelligence.Models
@using BlazorDocumentIntelligence.Shared
@inject IAzureDocumentIntelligenceService DocumentIntelligenceService
@inject IAzureBlobStorageService BlobStorageService

<div class="container-fluid">
    <h3 class="mb-4">Extract Invoices Data (OCR) Using Blazor and Azure Document Intelligence with prebuilt-invoice model.</h3>
    <div class="mb-4 d-flex align-items-center">
        <InputFile OnChange="HandleFileSelected" />
        <button class="btn btn-primary ms-2" @onclick="AnalyzeDocumentAsync" disabled="@(!_canAnalyze)">
            @if (_isAnalyzing)
            {
                <span class="spinner-border spinner-border-sm mr-2" role="status" aria-hidden="true"></span>
                <span>Analyzing...</span>
            }
            else
            {
                <span>Analyze Document</span>
            }
        </button>
    </div>

    @if (_invoiceAnalysis != null)
    {
        <div class="card">
            <div class="card-body">
                <!-- Header Section -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h5 class="text-muted mb-3">Vendor</h5>
                        <h4>@_invoiceAnalysis.VendorName</h4>
                    </div>
                    <div class="col-md-6">
                        <h5 class="text-muted mb-3">Customer</h5>
                        <h4>@_invoiceAnalysis.CustomerName</h4>
                    </div>
                </div>

                <!-- Items Table -->
                <div class="table-responsive mb-4">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Description</th>
                                <th class="text-center">Quantity</th>
                                <th class="text-end">Amount</th>
                                <th class="text-end">Confidence</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in _invoiceAnalysis.Items)
                            {
                                <tr>
                                    <td>@item.Description</td>
                                    <td class="text-center">
                                        @if (item.Quantity.HasValue)
                                        {
                                            @item.Quantity.Value.ToString("N2")
                                            @if (item.QuantityConfidence.HasValue)
                                            {
                                                <small class="text-muted">(@(item.QuantityConfidence.Value.ToString("P1")))</small>
                                            }
                                        }
                                    </td>
                                    <td class="text-end">
                                        @if (item.Amount != null)
                                        {
                                            @($"{item.Amount.CurrencySymbol}{item.Amount.Amount:N2}")
                                        }
                                    </td>
                                    <td class="text-end">
                                        @if (item.Confidence.HasValue)
                                        {
                                            @item.Confidence.Value.ToString("P1")
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Totals Section -->
                <div class="row justify-content-end">
                    <div class="col-md-4">
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <tr>
                                    <td class="text-end">Subtotal:</td>
                                    <td class="text-end">
                                        @if (_invoiceAnalysis.SubTotal != null)
                                        {
                                            @($"{_invoiceAnalysis.SubTotal.CurrencySymbol}{_invoiceAnalysis.SubTotal.Amount:N2}")
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-end">Tax:</td>
                                    <td class="text-end">
                                        @if (_invoiceAnalysis.TotalTax != null)
                                        {
                                            @($"{_invoiceAnalysis.TotalTax.CurrencySymbol}{_invoiceAnalysis.TotalTax.Amount:N2}")
                                        }
                                    </td>
                                </tr>
                                <tr class="fw-bold">
                                    <td class="text-end">Total:</td>
                                    <td class="text-end">
                                        @if (_invoiceAnalysis.InvoiceTotal != null)
                                        {
                                            @($"{_invoiceAnalysis.InvoiceTotal.CurrencySymbol}{_invoiceAnalysis.InvoiceTotal.Amount:N2}")
                                        }
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <Snackbar Message="@_snackbarMessage" CssClass="@_snackbarCssClass" Visible="@_snackbarVisible" OnClose="HideSnackbar" />
</div>

@code {
    private InvoiceAnalysis? _invoiceAnalysis;
    private bool _isAnalyzing;
    private bool _canAnalyze = false;
    private string? _uploadedFileUrl;
    private string? _snackbarMessage;
    private string _snackbarCssClass = "bg-success";
    private bool _snackbarVisible;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        _canAnalyze = false;
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            var fileName = $"{Guid.NewGuid()}_{file.Name}";
            try
            {
                _uploadedFileUrl = await BlobStorageService.UploadAsync(stream, fileName);
                _canAnalyze = true;
                ShowSnackbar("File uploaded to Azure Blob Storage successfully.");
            }
            catch
            {
                _canAnalyze = false;
                ShowSnackbar("Error uploading file to Azure Blob Storage.", isError: true);
            }
        }
    }

    private async Task AnalyzeDocumentAsync()
    {
        if (string.IsNullOrEmpty(_uploadedFileUrl))
            return;

        try
        {
            _isAnalyzing = true;
            _invoiceAnalysis = await DocumentIntelligenceService.AnalyzeAsync(_uploadedFileUrl);
            ShowSnackbar("Document analysis succeeded.");
        }
        catch
        {
            ShowSnackbar("Error during document analysis.", isError: true);
        }
        finally
        {
            _isAnalyzing = false;
        }
    }

    private void ShowSnackbar(string message, bool isError = false)
    {
        _snackbarMessage = message;
        _snackbarCssClass = isError ? "bg-danger" : "bg-success";
        _snackbarVisible = true;
        StateHasChanged();
        _ = HideSnackbarAfterDelay();
    }

    private async Task HideSnackbarAfterDelay()
    {
        await Task.Delay(5000);
        _snackbarVisible = false;
        StateHasChanged();
    }

    private Task HideSnackbar()
    {
        _snackbarVisible = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
